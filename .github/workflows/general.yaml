name: Go

on:
  push:
    branches:
      - main

  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main

  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1

      - name: Install dependencies
        run: go mod download

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run tests
        run: go test ./tests

  format:
    name: Go fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Go fmt
        run: go fmt ./api

  lint:
    name: Go lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
      - name: Run Staticcheck
        run: staticcheck ./api

  # coverage:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: newsletter
  #       ports:
  #         - 5432:5432

  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: 1.21.1

  #     - name: Install dependencies
  #       run: go mod download

  #     - name: Migrate database
  #       run: SKIP_DOCKER=true ./scripts/init_db.sh

  #     - name: Generate code coverage
  #       run: go test -coverprofile=coverage.out ./api && go tool cover -func=coverage.out
